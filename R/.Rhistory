library(persistR)
data("post_disturbance")
abundance=post_disturbance$abundance
sites = post_disturbance$sites
surveys = post_disturbance$surveys
cluster = post_disturbance$cluster
type = "mixed"
onlyDraw = NULL
axes = c(1, 2)
species = FALSE
zoom = FALSE
add.legend = FALSE
cluster.name = NULL
if(length(sites) != nrow(abundance)){
stop("Length of 'sites' must be equal to the number of abundance rows")
}
if(length(surveys) != nrow(abundance)){
stop("Length of 'surveys' must be equal to the number of abundance rows")
}
if(any(table(sites) != 3)){
stop("Each site must be surveyed three times")
}
if(!is.null(cluster) & length(cluster) != nrow(abundance)){
stop("Length of 'cluster' must be equal to the number of abundance rows")
}
# Sites that will be drawn
if(!is.null(onlyDraw)){
siteID <- onlyDraw
} else {siteID <- unique(sites)}
drawID <- which(sites %in% siteID)
drawSites <- sites[drawID]
drawSurveys <- surveys[drawID]
# PCA of abundance matrix
pca <- vegan::rda(abundance)
# Coordinates of PCA
scores.pca <- vegan::scores(pca, choices = axes, display = c("sites", "species"))
scores.pca
vegan::scores(pca
)
pca
vegan::scores(pca)
vegan::scores(pca, choices = c(1, 2, 3))
abundance
coordinates <- vegan::scores(pca, choices = 1:4, display = "sites")
newplot()
plot.new()
xlab = "asf"
plot.new(xlab = "abc")
plot(1, 1)
plot(c(min(coordinates[1, ]), max(coordinates[1, ])), c(min(coordinates[2, ]), max(coordinates[2, ])))
range(coordinates[axes[1]])
View(coordinates)
range(coordinates$PC1)
coordinates <- data.frame(coordinates)
range(coordinates)
range(coordinates$PC1)
range(coordinates[axes[1]])
drawID
graphics::plot(xrange, yrange, type = "n",
xlab = paste0("axis ", axes[1]),
ylab = paste0("axis ", axes[2]),
xlim = range(coordinates[drawID, axes[1]]),
ylim = range(coordinates[drawID, axes[2]])
)
# Draw empty plot with zoom (if zoom == TRUE)
xrange = range(coordinates[axes[1]])
yrange = range(coordinates[axes[2]])
graphics::plot(xrange, yrange, type = "n",
xlab = paste0("axis ", axes[1]),
ylab = paste0("axis ", axes[2]),
xlim = range(coordinates[drawID, axes[1]]),
ylim = range(coordinates[drawID, axes[2]])
)
coordinates.sp <- vegan::scores(pca, choices = 1:4, display = "species")
coordinates.sp <- data.frame(coordinates.sp)
for(sp in 1:nrow(coordinates.sp)){
shape::Arrows(x0 = 0, y0 = 0, x1 = coordinates.sp[sp, 1], y1 = coordinates.sp[sp, 2],
col = "darkgrey", arr.adj = 1)
graphics::text(x = coordinates.sp[sp, 1], y = coordinates.sp[sp, 2], labels = row.names(coordinates.sp)[sp],
col = "darkgrey")
}
for(i in 1:length(siteID)){
# sites and surveys may not be in order
ind <- drawID[which(drawSites == siteID[i])]
ind <- ind[order(drawSurveys[which(drawSites == siteID[i])])]
# Linking lines
if(type == "mixed"){
if(!is.null(cluster)) graphics::lines(x = coordinates[ind, axes[1]], y = coordinates[ind, axes[2]],
col = cluster[ind][2])
else graphics::lines(x = coordinates[ind, axes[1]], y = coordinates[ind, axes[2]])
}
# Disturbed states
if(type == "points"){
if(!is.null(cluster)) graphics::points(x = coordinates[ind[2], axes[1]], y = coordinates[ind[2], axes[2]],
pch = 15, col = cluster[ind][2])
else graphics::points(x = coordinates[ind[2], axes[1]], y = coordinates[ind[2], axes[2]], pch = 15)
}
if(type %in% c("mixed", "points")){
# Pre-disturbance states
if(!is.null(cluster)) graphics::points(x = coordinates[ind[1], axes[1]], y = coordinates[ind[1], axes[2]],
pch = 16, col = cluster[ind][1])
else graphics::points(x = coordinates[ind[1], axes[1]], y = coordinates[ind[1], axes[2]], pch = 16)
# Final points
if(!is.null(cluster)) graphics::points(x = coordinates[ind[3], axes[1]], y = coordinates[ind[3], axes[2]],
pch = 17, col = cluster[ind][3])
else graphics::points(x = coordinates[ind[3], axes[1]], y = coordinates[ind[3], axes[2]], pch = 17)
}
# Arrows
if(type == "arrows"){
graphics::lines(x = coordinates[ind, axes[1]], y = coordinates[ind, axes[2]], col = ind[1])
shape::Arrows(x0 = coordinates[ind[2], axes[1]], y0 = coordinates[ind[2], axes[2]],
x1 = coordinates[ind[3], axes[1]], y1 = coordinates[ind[3], axes[2]],
col = ind[1])
}
}
onlyDraw = 1:9
# Sites that will be drawn
if(!is.null(onlyDraw)){
siteID <- onlyDraw
} else {siteID <- unique(sites)}
drawID <- which(sites %in% siteID)
drawSites <- sites[drawID]
drawSurveys <- surveys[drawID]
# Set plot space if add.legend == TRUE
if(add.legend == TRUE){
graphics::layout(mat = matrix(c(1, 2), nrow = 1, ncol = 2, byrow = T), widths = c(1, 1/2))
}
graphics::par(mar = c(4, 4, 3, 0))
# Define plot ranges
xrange = range(coordinates[axes[1]])
yrange = range(coordinates[axes[2]])
graphics::plot(xrange, yrange, type = "n",
xlab = paste0("axis ", axes[1]),
ylab = paste0("axis ", axes[2]),
xlim = range(coordinates[drawID, axes[1]]),
ylim = range(coordinates[drawID, axes[2]])
)
for(i in 1:length(siteID)){
# sites and surveys may not be in order
ind <- drawID[which(drawSites == siteID[i])]
ind <- ind[order(drawSurveys[which(drawSites == siteID[i])])]
# Linking lines
if(type == "mixed"){
if(!is.null(cluster)) graphics::lines(x = coordinates[ind, axes[1]], y = coordinates[ind, axes[2]],
col = cluster[ind][2])
else graphics::lines(x = coordinates[ind, axes[1]], y = coordinates[ind, axes[2]])
}
# Disturbed states
if(type == "points"){
if(!is.null(cluster)) graphics::points(x = coordinates[ind[2], axes[1]], y = coordinates[ind[2], axes[2]],
pch = 15, col = cluster[ind][2])
else graphics::points(x = coordinates[ind[2], axes[1]], y = coordinates[ind[2], axes[2]], pch = 15)
}
if(type %in% c("mixed", "points")){
# Pre-disturbance states
if(!is.null(cluster)) graphics::points(x = coordinates[ind[1], axes[1]], y = coordinates[ind[1], axes[2]],
pch = 16, col = cluster[ind][1])
else graphics::points(x = coordinates[ind[1], axes[1]], y = coordinates[ind[1], axes[2]], pch = 16)
# Final points
if(!is.null(cluster)) graphics::points(x = coordinates[ind[3], axes[1]], y = coordinates[ind[3], axes[2]],
pch = 17, col = cluster[ind][3])
else graphics::points(x = coordinates[ind[3], axes[1]], y = coordinates[ind[3], axes[2]], pch = 17)
}
# Arrows
if(type == "arrows"){
graphics::lines(x = coordinates[ind, axes[1]], y = coordinates[ind, axes[2]], col = ind[1])
shape::Arrows(x0 = coordinates[ind[2], axes[1]], y0 = coordinates[ind[2], axes[2]],
x1 = coordinates[ind[3], axes[1]], y1 = coordinates[ind[3], axes[2]],
col = ind[1])
}
}
onlyDraw = 1:3
if(length(sites) != nrow(coordinates)){
stop("Length of 'sites' must be equal to the number of coordinates rows")
}
if(length(surveys) != nrow(coordinates)){
stop("Length of 'surveys' must be equal to the number of coordinates rows")
}
if(any(table(sites) != 3)){
stop("Each site must be surveyed three times")
}
if(!is.null(cluster) & length(cluster) != nrow(coordinates)){
stop("Length of 'cluster' must be equal to the number of coordinates rows")
}
# Sites that will be drawn
if(!is.null(onlyDraw)){
siteID <- onlyDraw
} else {siteID <- unique(sites)}
drawID <- which(sites %in% siteID)
drawSites <- sites[drawID]
drawSurveys <- surveys[drawID]
# Set plot space if add.legend == TRUE
if(add.legend == TRUE){
graphics::layout(mat = matrix(c(1, 2), nrow = 1, ncol = 2, byrow = T), widths = c(1, 1/2))
}
graphics::par(mar = c(4, 4, 3, 0))
# Define plot ranges
xrange = range(coordinates[axes[1]])
yrange = range(coordinates[axes[2]])
xrange
graphics::plot(xrange, yrange, type = "n",
xlab = paste0("axis ", axes[1]),
ylab = paste0("axis ", axes[2]),
xlim = range(coordinates[drawID, axes[1]]),
ylim = range(coordinates[drawID, axes[2]])
)
for(i in 1:length(siteID)){
# sites and surveys may not be in order
ind <- drawID[which(drawSites == siteID[i])]
ind <- ind[order(drawSurveys[which(drawSites == siteID[i])])]
# Linking lines
if(type == "mixed"){
if(!is.null(cluster)) graphics::lines(x = coordinates[ind, axes[1]], y = coordinates[ind, axes[2]],
col = cluster[ind][2])
else graphics::lines(x = coordinates[ind, axes[1]], y = coordinates[ind, axes[2]])
}
# Disturbed states
if(type == "points"){
if(!is.null(cluster)) graphics::points(x = coordinates[ind[2], axes[1]], y = coordinates[ind[2], axes[2]],
pch = 15, col = cluster[ind][2])
else graphics::points(x = coordinates[ind[2], axes[1]], y = coordinates[ind[2], axes[2]], pch = 15)
}
if(type %in% c("mixed", "points")){
# Pre-disturbance states
if(!is.null(cluster)) graphics::points(x = coordinates[ind[1], axes[1]], y = coordinates[ind[1], axes[2]],
pch = 16, col = cluster[ind][1])
else graphics::points(x = coordinates[ind[1], axes[1]], y = coordinates[ind[1], axes[2]], pch = 16)
# Final points
if(!is.null(cluster)) graphics::points(x = coordinates[ind[3], axes[1]], y = coordinates[ind[3], axes[2]],
pch = 17, col = cluster[ind][3])
else graphics::points(x = coordinates[ind[3], axes[1]], y = coordinates[ind[3], axes[2]], pch = 17)
}
# Arrows
if(type == "arrows"){
graphics::lines(x = coordinates[ind, axes[1]], y = coordinates[ind, axes[2]], col = ind[1])
shape::Arrows(x0 = coordinates[ind[2], axes[1]], y0 = coordinates[ind[2], axes[2]],
x1 = coordinates[ind[3], axes[1]], y1 = coordinates[ind[3], axes[2]],
col = ind[1])
}
}
